// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: repro.proto

package repro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReproClient is the client API for Repro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReproClient interface {
	LargeClientStream(ctx context.Context, opts ...grpc.CallOption) (Repro_LargeClientStreamClient, error)
}

type reproClient struct {
	cc grpc.ClientConnInterface
}

func NewReproClient(cc grpc.ClientConnInterface) ReproClient {
	return &reproClient{cc}
}

func (c *reproClient) LargeClientStream(ctx context.Context, opts ...grpc.CallOption) (Repro_LargeClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repro_ServiceDesc.Streams[0], "/repro.Repro/LargeClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &reproLargeClientStreamClient{stream}
	return x, nil
}

type Repro_LargeClientStreamClient interface {
	Send(*Bytes) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type reproLargeClientStreamClient struct {
	grpc.ClientStream
}

func (x *reproLargeClientStreamClient) Send(m *Bytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reproLargeClientStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReproServer is the server API for Repro service.
// All implementations must embed UnimplementedReproServer
// for forward compatibility
type ReproServer interface {
	LargeClientStream(Repro_LargeClientStreamServer) error
	mustEmbedUnimplementedReproServer()
}

// UnimplementedReproServer must be embedded to have forward compatible implementations.
type UnimplementedReproServer struct {
}

func (UnimplementedReproServer) LargeClientStream(Repro_LargeClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LargeClientStream not implemented")
}
func (UnimplementedReproServer) mustEmbedUnimplementedReproServer() {}

// UnsafeReproServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReproServer will
// result in compilation errors.
type UnsafeReproServer interface {
	mustEmbedUnimplementedReproServer()
}

func RegisterReproServer(s grpc.ServiceRegistrar, srv ReproServer) {
	s.RegisterService(&Repro_ServiceDesc, srv)
}

func _Repro_LargeClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReproServer).LargeClientStream(&reproLargeClientStreamServer{stream})
}

type Repro_LargeClientStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*Bytes, error)
	grpc.ServerStream
}

type reproLargeClientStreamServer struct {
	grpc.ServerStream
}

func (x *reproLargeClientStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reproLargeClientStreamServer) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Repro_ServiceDesc is the grpc.ServiceDesc for Repro service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repro_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repro.Repro",
	HandlerType: (*ReproServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LargeClientStream",
			Handler:       _Repro_LargeClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "repro.proto",
}
